<?php

namespace App\Command;

use App\Component\WebClient;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ChoiceQuestion;
use Symfony\Component\Console\Question\Question;

class UzMonitorCreate extends Command
{
    protected $webClient;

    public static $defaultName = 'uz:monitor:create';

    public static $defaultDescription = 'Creates command for polling of uz.booking';

    public function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
    }

    public function __construct()
    {
        parent::__construct();

        $this->webClient = new WebClient();
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {
        $negotiator = $this->getHelper('question');

        $fromQuestion = new Question('From: ');
        $fromTerm = $negotiator->ask($input, $output, $fromQuestion);

        $fromOptions = $this->getCityOptions($fromTerm);
        if (empty($fromOptions)) {
            $output->writeln("No cities found");
            return Command::FAILURE;
        }

        $fromChoice = new ChoiceQuestion('Select one of available cities', array_keys($fromOptions));
        $from = $negotiator->ask($input, $output, $fromChoice);
        $fromCode = $fromOptions[$from];

        $toQuestion = new Question('To: ');
        $toTerm = $negotiator->ask($input, $output, $toQuestion);

        $toOptions = $this->getCityOptions($toTerm);
        if (empty($toOptions)) {
            $output->writeln("No cities found");
            return Command::FAILURE;
        }

        $toChoice = new ChoiceQuestion('Select one of available cities', array_keys($toOptions));
        $to = $negotiator->ask($input, $output, $toChoice);
        $toCode = $toOptions[$to];

        $dateQuestion = new Question('Date (yyyy-mm-dd): ');
        $date = $negotiator->ask($input, $output, $dateQuestion);

        $namesQuestion = new Question('Comma-separated full names of passengers: ');
        $passengersNames = $negotiator->ask($input, $output, $namesQuestion);

        $minTimeQuestion = new Question('Departure time after (optional, default: 00:00): ');
        $minTime = $negotiator->ask($input, $output, $minTimeQuestion);

        $trainsQuestion = new Question('Comma-separated concrete train number(s), (optional, any train by default): ');
        $trainNumbers = $negotiator->ask($input, $output, $trainsQuestion);

        $placesQuestion = new Question('Places type, one of K, П, Л (optional, any type by default): ');
        $placesType = $negotiator->ask($input, $output, $placesQuestion);

        $runCommand = 'uz:monitor:run';
        $arguments = [
            'fromCode' => $fromCode,
            'toCode' => $toCode,
            'date' => $date,
            'passengersNames' => $passengersNames
        ];
        $options = array_filter([
            '--minTime' => $minTime,
            '--trainNumbers' => $trainNumbers,
            '--placesType' => $placesType,
        ]);

        array_walk($options, function (&$value, $key) {
            $value = "{$key}='{$value}'";
        });

        $resultCommand = "{$runCommand} '{$fromCode}' '{$toCode}' '{$date}' '{$passengersNames}' " . implode(' ', $options);

        $output->writeln($resultCommand);

        return Command::SUCCESS;
    }

    protected function getCityOptions($term)
    {
        $response = $this->webClient->get('https://booking.uz.gov.ua/ru/train_search/station/?term='.urlencode($term));
        $citiesData = json_decode($response, true);

        return $citiesData ? array_column($citiesData, 'value', 'title') : [];
    }
}
